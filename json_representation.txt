First let me start by formally defining all supported types in DSH.

t ::= Bool      -- basic boolean type
  | Char      -- basic character type
  | Double    -- basic floating point type
  | Integer   -- basic integer type
  | ()        -- basic unit type, the unit () is is the only valid value of this type
  | Text      -- basic text type
  | [t]       -- list type
  | (t,t)     -- tuple type
  | (t,t,t)   -- tuple type
  | ...       -- unto some finite length of tuples

More informally, arbitrarily nested lists and tuples of basic types.

Here is one way to faithfully (without loosing any information both at the
type level and at the value level) represent DSH values in JSON. Here [| . |]
operator is a representation translation operator. I will use -- to give one
line comments in the translation.


[| Bool |] = { "type"  : [| Bool |]_type
             , "value" : v       -- where v is JSON's true or false
             }

[| Char |] = { "type"  : [| Char |]_type
             , "value" : v       -- where v is single character JSON String
             }

[| Double |] = { "type"  : [| Double |]_type
               , "value" : v     -- where v is JSON Number
               }

[| Integer |] = { "type"  : [| Integer |]_type
                , "value" : v     -- where v is JSON Number
                }

[| () |] = { "type"  : [| () |]_type
           , "value" : v       -- where v is JSON null
           }

[| Text |] = { "type"  :  [| Text |]_type
             , "value" : v       -- where v is JSON String
             }

[| [t] |] = { "type"  :  [| [t] |]_type  -- where t is the type of elements in the list
            , "value" : v                -- where v is JSON Array with objects of type t in our representation
            }

[| (t1,t2) |] = { "type"  :  [| (t1,t2) |]_type   -- where t1 and t2 are the types of elements in the tuple
                , "value" : v                     -- where v is an JSON Array with objects of type t1 and t2 in our representation
                }

[| (t1,t2,t3) |] = { "type"  :  [| (t1,t2,t3) |]_type  -- where t1, t2 and t3 are the types of elements in the tuple
                   , "value" : v                       -- where v is an JSON Array with objects of type t1, t2 and t3 in our representation
                   }
                  

[| Bool |]_type    = {"type_constructor" : "Bool"}
[| Char |]_type    = {"type_constructor" : "Char"}
[| Double |]_type  = {"type_constructor" : "Double"}
[| Integer |]_type = {"type_constructor" : "Integer"}
[| () |]_type      = {"type_constructor" : "Unit"}
[| Text |]_type    = {"type_constructor" : "Text"}

[| [t] |]_type     = { "type_constructor" : "List"
                     , "argument" : [| t |]_type
                     }

[| (t1,t2) |]_type = { "type_constructor" : "Tuple"
                     , "argument" : [ [| t1 |]_type, [| t2 |]_type ]
                     }

[| (t1,t2,t3) |]_type = { "type_constructor" : "Tuple"
                        , "argument" : [ [| t1 |]_type, [| t2 |]_type, [| t3 |]_type ]
                        }                     
